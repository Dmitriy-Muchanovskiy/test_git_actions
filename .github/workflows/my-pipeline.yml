# This is a basic workflow to help you get started with Actions
# ---------------------
# My comment

name: Github_Actions_test
env:
  APP_NAME     : "My APP"
  PACKAGE_NAME : "Package for deploy ${{ github.sha }}"

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  my_job1:
    # The type of runner that the job will run on
    runs-on: ubuntu-latestertert

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
     # - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Print My Hello!
        run: echo "Hello, world in the test from ${{ env.APP_NAME }}!"

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Current date is
          date '+%Y.%m.%d-%H:%M'
      - name: Git clone repo to docker
        uses: actions/checkout@v2
        
      - name: Print list of files in current filder
        run: ls -la
        
          
  my_deploy1:
    runs-on: ubuntu-latest
    needs: [my_job1]
    env:
      VAR1: "Jeploy job VAR1"
      VAR2: "Jeploy job VAR2"
    
    steps:
      - name: My First Deploy starts
        run: |
          echo "Test text for Deploy Block"
          echo "Deploy is over for ${{ env.PACKAGE_NAME }}"
          ls -la
          
      - name: Print ENV Variables
        run: |
          echo "VAR1 for deploy = ${{ env.VAR1 }}"
          echo "VAR2 for deploy = ${{ env.VAR2 }}"
          echo "VAR3 for deploy = $LOCAL_VAR"
        env:
          LOCAL_VAR: "VAR FOR TEST STEP"
          
      - name: Version AWS if it here
        run: aws --version
        
      - name: Version TAR if it here
        run: tar --version
    
  

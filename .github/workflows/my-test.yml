# This is a basic workflow to help you get started with Actions

name: MY-CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo -e "\nsome artifact \nfrom build stage\nthis is very usefull!" > artifact.t
          ls -la
          
      - name: Download artifact
        uses: actions/upload-artifact@v2
        with:
          name: test_artifact
          path: artifact.t
          retention-days: 5

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      #- name: Copy git repo
        #uses: actions/checkout@v2
    
      - name: Test Stage
        run: |
          ls -la
          uname -a
          echo "test branching"
          
      - name: Download artifacat
        uses: actions/download-artifact@v2
        with:
          name: test_artifact
          
      - name: read build result
        run: |
          ls -la
          cat artifact.t
          echo "hashfile = ${{ hashFiles('artifact.t') }}"

  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "The job was automatically triggered by a $GITHUB_EVENT_NAME event BY CAPS"
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "The workflow $GITHUB_WORKFLOW is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name : block for test
        run: |
          echo "This job's status is ${{ job.status }}."
          echo "If add [skip ci] in commit actions will be ignored"
          go version
          docker-compose --version

  docker_test:
    runs-on: ubuntu-latest
    if: ${{ false }}

    steps:
      - name: Git Clone
        uses: actions/checkout@v2
      - name: Docker compose up started
        run: |
          pwd
          ls -la
          docker-compose -f ./projarka/docker-compose.yml up -d
      - name: Some tests for containers #container with db dont work
        run: |
          #docker exec projarka-db mysql -u root -prootdb -e  "select * from projarka.first"
          docker exec projarka-db ls -la
          docker ps -a
          sleep 5
          curl localhost:8888

  go_lint_test:
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: go_main

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2  
      - name: test  hello go
        if: ${{ false }}
        run: go run hello.go    
      - name: golangci-lint action
        if: ${{ false }}
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
      - name: golangci-lint install manual
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.41.1
          echo $(go env GOPATH)/bin >> $GITHUB_PATH
          #PATH=$PATH:/usr/bin/go
      - name: go lint
        run: |
          #env && echo "-------------------------"
          #whereis go && echo "-----------------"
          #go env && echo "-----------------"
          #echo $(go env GOPATH)/bin
          golangci-lint --version
          pwd
          golangci-lint run ./... test_folder/...
          #golangci-lint run hello.go
          echo "go-lint successfully finished"
      - name: Go compile
        run: |
          go mod init hello.go
          go mod tidy
          go build -o ${{ env.PACKAGE_NAME }}
          ./${{ env.PACKAGE_NAME }}
      - name: Go unit-tests 
        run: |
          cd go_test && pwd



  Setup_python:
    runs-on: ubuntu-latest
    if: ${{ false }}
    #needs: test
    #strategy:
      #matrix:
        #python-version: [3.9]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up Python 3.9 #${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9 #${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: my python test
        run: |
          python3 my.py &
          sleep 5
          curl localhost:8888
      
      - name: Test with pytest
        if: ${{ false }}
        run: |
          pytest

